homeassistant:
  # Name of the location where Home Assistant is running
  name: Home
  # Location required to calculate the time the sun rises and sets
  latitude: 49.2
  longitude: 16.6333
  # Impacts weather/sunrise data (altitude above sea level in meters)
  elevation: 202
  # metric for Metric, imperial for Imperial
  unit_system: metric
  # Pick yours from here: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  time_zone: Europe/Prague
  # Customization file
  customize: !include customize.yaml

# Show links to resources in log and frontend
introduction:

# Enables the frontend
frontend:

# Enables configuration UI
config:

http:
  # Secrets are defined in the file secrets.yaml
  # api_password: !secret http_password
  # Uncomment this if you are using SSL/TLS, running in Docker container, etc.
  # base_url: example.duckdns.org:8123

# Checks for available updates
# Note: This component will send some information about your system to
# the developers to assist with development of Home Assistant.
# For more information, please see:
# https://home-assistant.io/blog/2016/10/25/explaining-the-updater/
updater:
  # Optional, allows Home Assistant developers to focus on popular components.
  # include_used_components: true

# Discover some devices automatically
discovery:

# Allows you to issue voice commands from the frontend in enabled browsers
conversation:

# Enables support for tracking state changes over time
history:

# View all events in a logbook
logbook:

# Enables a map showing the location of tracked devices
map:

# Track the sun
sun:



# Weather prediction
sensor:
  - platform: yr
  
  - platform: mqtt
    state_topic : "pds/pir"
    name: "PIR senzor"
    value_template: '{{ value_json.motion }}'

# Text to speech
tts:
  - platform: google

# Cloud
cloud:

#Configurator 
panel_iframe:
  configurator:
    title: Configurator
    icon: mdi:wrench
    url: IP ADRESA HA :3218
    
#MQTT Configuration
mqtt:
  broker: core-mosquitto
  username: test
  password: test
  


light:
  - platform: mqtt_json
    name: Efekty
    state_topic: "pds/led"
    command_topic: "pds/led/set"
    effect: true
    effect_list:
      - bpm
      - candy cane  
      - confetti  
      - cyclon rainbow  
      - dots  
      - fire  
      - glitter  
      - juggle  
      - lightning
      - noise  
      - police all  
      - police one  
      - rainbow  
      - rainbow with glitter  
      - ripple  
      - sinelon  
      - solid  
      - twinkle  
    brightness: true
    flash: true
    rgb: true
    optimistic: false
    qos: 0
    
group:
  Led pásek:
    - input_number.led_strip_speed
    - light.Efekty
    - sensor.pir_senzor
    - automation.notifikace_telegram
    - automation.notifikace_gmail
    - input_number.timer_slider
    - automation.automaticke_zapnuti
    - automation.automaticke_vypnuti



timer:
    led_timer:
       name: Timer
       icon: 'mdi:close-circle'


input_number:
  led_strip_speed:
    icon: mdi:speedometer 
    name: Rychlost
    initial: 150
    min: 1
    max: 150
    step: 10


  timer_slider:
    icon: mdi:timer
    name: Časovač
    initial: 1
    min: 1
    max: 60
    step: 5
    mode: slider
    unit_of_measurement: Seconds



automation:
  - alias: "Rychlost efektů"
    initial_state: True
    hide_entity: True
    trigger:
      - platform: state
        entity_id: input_number.led_strip_speed
    action:
      - service: mqtt.publish
        data_template:
          topic: "pds/led/set"
          payload: '{"transition":{{ trigger.to_state.state | int }}}'
          
  - alias: "Notifikace Telegram"
    initial_state: True
    hide_entity: False
    trigger:
      - platform: state
        entity_id: sensor.pir_senzor
        from: 'StandBy'
        to: 'Send notification'
    action:
      - service: notify.telegram
        data:
          title: PIR 
          message: "Movement detected!"
          
  - alias: "Notifikace Gmail"
    initial_state: True
    hide_entity: False
    trigger:
      - platform: state
        entity_id: sensor.pir_senzor
        from: 'StandBy'
        to: 'Send notification'
    action:
      - service: notify.SMTP_GMAIL 
        data:
          title: PIR 
          message: "Movement detected!"

  - alias: "Automatické zapnutí"
    initial_state: True
    hide_entity: False
    trigger:
      - platform: state
        entity_id: sensor.pir_senzor
        to: 'Motion detect'
    action:
      - service: mqtt.publish
        data_template:
           topic: "pds/led/set"
           payload: '{"state":"ON","color":{"r":255,"g":255,"b":255},"brightness":124,"effect":"solid"}'
      - service: timer.start
        data_template:
          entity_id: timer.led_timer
          duration: '00:00:{{ states.input_number.timer_slider.state | int }}'
          
  - alias: "Automatické vypnutí"
    initial_state: True
    hide_entity: False
    trigger:
      platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.led_timer
    action:
      - service: mqtt.publish
        data_template:
          topic: "pds/led/set"
          payload: '{"state":"OFF","color":{"r":255,"g":255,"b":255},"brightness":124,"effect":"solid"}'
      
   
      
      
telegram_bot:
    - platform: polling
      api_key: VAŠ API KEY
      allowed_chat_ids:
        - VAŠ CHAT ID


        
  

#group: !include groups.yaml
#automation: !include automations.yaml
script: !include scripts.yaml
notify: !include notify.yaml
#script: !include_dir_merge_named script_config
